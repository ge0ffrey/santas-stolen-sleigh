<?xml version="1.0" encoding="UTF-8"?>
<solver>
  <!--<environmentMode>FULL_ASSERT</environmentMode>-->
  <solutionClass>org.optaplannerdelirium.sss.domain.ReindeerRoutingSolution</solutionClass>
  <entityClass>org.optaplannerdelirium.sss.domain.Standstill</entityClass>
  <entityClass>org.optaplannerdelirium.sss.domain.GiftAssignment</entityClass>

  <scoreDirectorFactory>
    <scoreDefinitionType>HARD_SOFT_LONG</scoreDefinitionType>
    <!--<easyScoreCalculatorClass>org.optaplannerdelirium.sss.solver.score.ReindeerRoutingEasyScoreCalculator</easyScoreCalculatorClass>-->
    <incrementalScoreCalculatorClass>org.optaplannerdelirium.sss.solver.score.ReindeerRoutingIncrementalScoreCalculator</incrementalScoreCalculatorClass>
    <!--<assertionScoreDirectorFactory>-->
      <!--<easyScoreCalculatorClass>org.optaplannerdelirium.sss.solver.score.ReindeerRoutingEasyScoreCalculator</easyScoreCalculatorClass>-->
    <!--</assertionScoreDirectorFactory>-->
    <initializingScoreTrend>ONLY_DOWN</initializingScoreTrend>
  </scoreDirectorFactory>

  <customPhase>
    <!-- First initialize the big gifts to give each their own reindeer -->
    <customPhaseCommandClass>org.optaplannerdelirium.sss.solver.custom.BigGiftInitializer</customPhaseCommandClass>
  </customPhase>
  <constructionHeuristic>
    <!-- Then initialize the rest -->
    <constructionHeuristicType>FIRST_FIT_DECREASING</constructionHeuristicType>
  </constructionHeuristic>
  <localSearch>
    <unionMoveSelector>
      <changeMoveSelector>
        <entitySelector id="entitySelector1"/>
        <valueSelector>
          <nearbySelection>
            <originEntitySelector mimicSelectorRef="entitySelector1"/>
            <nearbyDistanceMeterClass>org.optaplannerdelirium.sss.solver.nearby.EuclideanGiftAssignmentNearbyDistanceMeter</nearbyDistanceMeterClass>
            <parabolicDistributionSizeMaximum>100</parabolicDistributionSizeMaximum>
          </nearbySelection>
        </valueSelector>
      </changeMoveSelector>
      <swapMoveSelector>
        <entitySelector id="entitySelector2"/>
        <secondaryEntitySelector>
          <nearbySelection>
            <originEntitySelector mimicSelectorRef="entitySelector2"/>
            <nearbyDistanceMeterClass>org.optaplannerdelirium.sss.solver.nearby.EuclideanGiftAssignmentNearbyDistanceMeter</nearbyDistanceMeterClass>
            <parabolicDistributionSizeMaximum>100</parabolicDistributionSizeMaximum>
          </nearbySelection>
        </secondaryEntitySelector>
      </swapMoveSelector>
      <tailChainSwapMoveSelector>
        <entitySelector id="entitySelector3"/>
        <valueSelector>
          <nearbySelection>
            <originEntitySelector mimicSelectorRef="entitySelector3"/>
            <nearbyDistanceMeterClass>org.optaplannerdelirium.sss.solver.nearby.EuclideanGiftAssignmentNearbyDistanceMeter</nearbyDistanceMeterClass>
            <parabolicDistributionSizeMaximum>100</parabolicDistributionSizeMaximum>
          </nearbySelection>
        </valueSelector>
      </tailChainSwapMoveSelector>
      <!--<kOptMoveSelector>-->
        <!--<entitySelector id="entitySelector4"/>-->
        <!--<valueSelector>-->
          <!--<nearbySelection>-->
            <!--<originEntitySelector mimicSelectorRef="entitySelector4"/>-->
            <!--<nearbyDistanceMeterClass>org.optaplannerdelirium.sss.solver.nearby.EuclideanGiftAssignmentNearbyDistanceMeter</nearbyDistanceMeterClass>-->
            <!--<parabolicDistributionSizeMaximum>100</parabolicDistributionSizeMaximum>-->
          <!--</nearbySelection>-->
        <!--</valueSelector>-->
      <!--</kOptMoveSelector>-->
    </unionMoveSelector>
    <acceptor>
      <lateAcceptanceSize>400</lateAcceptanceSize>
    </acceptor>
    <forager>
      <acceptedCountLimit>1</acceptedCountLimit>
    </forager>
  </localSearch>

</solver>
